// This file is generated by rust-protobuf 2.0.5. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Transaction {
    // message fields
    from: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    to: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    amount: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // required bytes from = 1;

    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    pub fn has_from(&self) -> bool {
        self.from.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: ::std::vec::Vec<u8>) {
        self.from = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.from.is_none() {
            self.from.set_default();
        }
        self.from.as_mut().unwrap()
    }

    // Take field
    pub fn take_from(&mut self) -> ::std::vec::Vec<u8> {
        self.from.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_from(&self) -> &[u8] {
        match self.from.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required bytes to = 2;

    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::vec::Vec<u8>) {
        self.to = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::vec::Vec<u8> {
        self.to.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_to(&self) -> &[u8] {
        match self.to.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required uint64 amount = 3;

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        if self.from.is_none() {
            return false;
        }
        if self.to.is_none() {
            return false;
        }
        if self.amount.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.from)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.to)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.from.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.to.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.from.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.to.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.amount {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "from",
                    |m: &Transaction| { &m.from },
                    |m: &mut Transaction| { &mut m.from },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "to",
                    |m: &Transaction| { &m.to },
                    |m: &mut Transaction| { &mut m.to },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &Transaction| { &m.amount },
                    |m: &mut Transaction| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Transaction>(
                    "Transaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Transaction {
        static mut instance: ::protobuf::lazy::Lazy<Transaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Transaction,
        };
        unsafe {
            instance.get(Transaction::new)
        }
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.clear_from();
        self.clear_to();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinaryData {
    // message fields
    data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BinaryData {
    pub fn new() -> BinaryData {
        ::std::default::Default::default()
    }

    // required bytes data = 1;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for BinaryData {
    fn is_initialized(&self) -> bool {
        if self.data.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinaryData {
        BinaryData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &BinaryData| { &m.data },
                    |m: &mut BinaryData| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BinaryData>(
                    "BinaryData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BinaryData {
        static mut instance: ::protobuf::lazy::Lazy<BinaryData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BinaryData,
        };
        unsafe {
            instance.get(BinaryData::new)
        }
    }
}

impl ::protobuf::Clear for BinaryData {
    fn clear(&mut self) {
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinaryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinaryData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Block {
    // message fields
    id: ::std::option::Option<u64>,
    timestamp: ::std::option::Option<i64>,
    nonce: ::std::option::Option<u64>,
    prev_block_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    data: ::protobuf::RepeatedField<Block_Data>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // required uint64 id = 1;

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = ::std::option::Option::Some(v);
    }

    pub fn get_id(&self) -> u64 {
        self.id.unwrap_or(0)
    }

    // required int64 timestamp = 2;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> i64 {
        self.timestamp.unwrap_or(0)
    }

    // required uint64 nonce = 3;

    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = ::std::option::Option::Some(v);
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce.unwrap_or(0)
    }

    // required bytes prev_block_hash = 4;

    pub fn clear_prev_block_hash(&mut self) {
        self.prev_block_hash.clear();
    }

    pub fn has_prev_block_hash(&self) -> bool {
        self.prev_block_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_block_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.prev_block_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_block_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.prev_block_hash.is_none() {
            self.prev_block_hash.set_default();
        }
        self.prev_block_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_prev_block_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.prev_block_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_prev_block_hash(&self) -> &[u8] {
        match self.prev_block_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated .Block.Data data = 5;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<Block_Data>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<Block_Data> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<Block_Data> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }

    pub fn get_data(&self) -> &[Block_Data] {
        &self.data
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        if self.timestamp.is_none() {
            return false;
        }
        if self.nonce.is_none() {
            return false;
        }
        if self.prev_block_hash.is_none() {
            return false;
        }
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.prev_block_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.nonce {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.prev_block_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.nonce {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.prev_block_hash.as_ref() {
            os.write_bytes(4, &v)?;
        }
        for v in &self.data {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "id",
                    |m: &Block| { &m.id },
                    |m: &mut Block| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timestamp",
                    |m: &Block| { &m.timestamp },
                    |m: &mut Block| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &Block| { &m.nonce },
                    |m: &mut Block| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "prev_block_hash",
                    |m: &Block| { &m.prev_block_hash },
                    |m: &mut Block| { &mut m.prev_block_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Block_Data>>(
                    "data",
                    |m: &Block| { &m.data },
                    |m: &mut Block| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Block>(
                    "Block",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Block {
        static mut instance: ::protobuf::lazy::Lazy<Block> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Block,
        };
        unsafe {
            instance.get(Block::new)
        }
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_timestamp();
        self.clear_nonce();
        self.clear_prev_block_hash();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Block_Data {
    // message fields
    field_type: ::std::option::Option<Block_DataType>,
    transaction: ::protobuf::SingularPtrField<Transaction>,
    binaryData: ::protobuf::SingularPtrField<BinaryData>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Block_Data {
    pub fn new() -> Block_Data {
        ::std::default::Default::default()
    }

    // required .Block.DataType type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Block_DataType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type(&self) -> Block_DataType {
        self.field_type.unwrap_or(Block_DataType::BINARY_DATA)
    }

    // optional .Transaction transaction = 2;

    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: Transaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut Transaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> Transaction {
        self.transaction.take().unwrap_or_else(|| Transaction::new())
    }

    pub fn get_transaction(&self) -> &Transaction {
        self.transaction.as_ref().unwrap_or_else(|| Transaction::default_instance())
    }

    // optional .BinaryData binaryData = 3;

    pub fn clear_binaryData(&mut self) {
        self.binaryData.clear();
    }

    pub fn has_binaryData(&self) -> bool {
        self.binaryData.is_some()
    }

    // Param is passed by value, moved
    pub fn set_binaryData(&mut self, v: BinaryData) {
        self.binaryData = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_binaryData(&mut self) -> &mut BinaryData {
        if self.binaryData.is_none() {
            self.binaryData.set_default();
        }
        self.binaryData.as_mut().unwrap()
    }

    // Take field
    pub fn take_binaryData(&mut self) -> BinaryData {
        self.binaryData.take().unwrap_or_else(|| BinaryData::new())
    }

    pub fn get_binaryData(&self) -> &BinaryData {
        self.binaryData.as_ref().unwrap_or_else(|| BinaryData::default_instance())
    }
}

impl ::protobuf::Message for Block_Data {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.binaryData {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.binaryData)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.binaryData.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.binaryData.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block_Data {
        Block_Data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Block_DataType>>(
                    "type",
                    |m: &Block_Data| { &m.field_type },
                    |m: &mut Block_Data| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                    "transaction",
                    |m: &Block_Data| { &m.transaction },
                    |m: &mut Block_Data| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BinaryData>>(
                    "binaryData",
                    |m: &Block_Data| { &m.binaryData },
                    |m: &mut Block_Data| { &mut m.binaryData },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Block_Data>(
                    "Block_Data",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Block_Data {
        static mut instance: ::protobuf::lazy::Lazy<Block_Data> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Block_Data,
        };
        unsafe {
            instance.get(Block_Data::new)
        }
    }
}

impl ::protobuf::Clear for Block_Data {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_transaction();
        self.clear_binaryData();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block_Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block_Data {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Block_DataType {
    BINARY_DATA = 0,
    TRANSACTION = 1,
}

impl ::protobuf::ProtobufEnum for Block_DataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Block_DataType> {
        match value {
            0 => ::std::option::Option::Some(Block_DataType::BINARY_DATA),
            1 => ::std::option::Option::Some(Block_DataType::TRANSACTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Block_DataType] = &[
            Block_DataType::BINARY_DATA,
            Block_DataType::TRANSACTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Block_DataType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Block_DataType {
}

impl ::protobuf::reflect::ProtobufValue for Block_DataType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15src/proto/chain.proto\"I\n\x0bTransaction\x12\x12\n\x04from\x18\
    \x01\x20\x02(\x0cR\x04from\x12\x0e\n\x02to\x18\x02\x20\x02(\x0cR\x02to\
    \x12\x16\n\x06amount\x18\x03\x20\x02(\x04R\x06amount\"\x20\n\nBinaryData\
    \x12\x12\n\x04data\x18\x01\x20\x02(\x0cR\x04data\"\xcd\x02\n\x05Block\
    \x12\x0e\n\x02id\x18\x01\x20\x02(\x04R\x02id\x12\x1c\n\ttimestamp\x18\
    \x02\x20\x02(\x03R\ttimestamp\x12\x14\n\x05nonce\x18\x03\x20\x02(\x04R\
    \x05nonce\x12&\n\x0fprev_block_hash\x18\x04\x20\x02(\x0cR\rprevBlockHash\
    \x12\x1f\n\x04data\x18\x05\x20\x03(\x0b2\x0b.Block.DataR\x04data\x1a\x88\
    \x01\n\x04Data\x12#\n\x04type\x18\x01\x20\x02(\x0e2\x0f.Block.DataTypeR\
    \x04type\x12.\n\x0btransaction\x18\x02\x20\x01(\x0b2\x0c.TransactionR\
    \x0btransaction\x12+\n\nbinaryData\x18\x03\x20\x01(\x0b2\x0b.BinaryDataR\
    \nbinaryData\",\n\x08DataType\x12\x0f\n\x0bBINARY_DATA\x10\0\x12\x0f\n\
    \x0bTRANSACTION\x10\x01J\xca\x08\n\x06\x12\x04\0\0\x1d\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x06\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x02\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x02\x1a\n\
    \x0c\n\x05\x04\0\x02\0\x04\x12\x03\x03\x02\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x03\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\x11\x15\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x18\x19\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x04\x02\x18\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x04\x02\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x04\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x04\x11\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x05\x02\x1d\n\x0c\n\x05\x04\0\
    \x02\x02\x04\x12\x03\x05\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x05\
    \x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x05\x12\x18\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x05\x1b\x1c\n\n\n\x02\x04\x01\x12\x04\x08\0\n\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x08\x08\x12\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\t\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\t\x02\n\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\t\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\t\x11\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t\x18\x19\n\n\n\
    \x02\x04\x02\x12\x04\x0c\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0c\x08\
    \r\n\x0c\n\x04\x04\x02\x04\0\x12\x04\r\x02\x10\x03\n\x0c\n\x05\x04\x02\
    \x04\0\x01\x12\x03\r\x07\x0f\n\r\n\x06\x04\x02\x04\0\x02\0\x12\x03\x0e\
    \x04\x14\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\x12\x03\x0e\x04\x0f\n\x0e\n\
    \x07\x04\x02\x04\0\x02\0\x02\x12\x03\x0e\x12\x13\n\r\n\x06\x04\x02\x04\0\
    \x02\x01\x12\x03\x0f\x04\x14\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\
    \x03\x0f\x04\x0f\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x03\x0f\x12\
    \x13\n\x0c\n\x04\x04\x02\x03\0\x12\x04\x12\x02\x16\x03\n\x0c\n\x05\x04\
    \x02\x03\0\x01\x12\x03\x12\n\x0e\n\r\n\x06\x04\x02\x03\0\x02\0\x12\x03\
    \x13\x04\x1f\n\x0e\n\x07\x04\x02\x03\0\x02\0\x04\x12\x03\x13\x04\x0c\n\
    \x0e\n\x07\x04\x02\x03\0\x02\0\x06\x12\x03\x13\r\x15\n\x0e\n\x07\x04\x02\
    \x03\0\x02\0\x01\x12\x03\x13\x16\x1a\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\
    \x12\x03\x13\x1d\x1e\n\r\n\x06\x04\x02\x03\0\x02\x01\x12\x03\x14\x04)\n\
    \x0e\n\x07\x04\x02\x03\0\x02\x01\x04\x12\x03\x14\x04\x0c\n\x0e\n\x07\x04\
    \x02\x03\0\x02\x01\x06\x12\x03\x14\r\x18\n\x0e\n\x07\x04\x02\x03\0\x02\
    \x01\x01\x12\x03\x14\x19$\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x03\
    \x14'(\n\r\n\x06\x04\x02\x03\0\x02\x02\x12\x03\x15\x04'\n\x0e\n\x07\x04\
    \x02\x03\0\x02\x02\x04\x12\x03\x15\x04\x0c\n\x0e\n\x07\x04\x02\x03\0\x02\
    \x02\x06\x12\x03\x15\r\x17\n\x0e\n\x07\x04\x02\x03\0\x02\x02\x01\x12\x03\
    \x15\x18\"\n\x0e\n\x07\x04\x02\x03\0\x02\x02\x03\x12\x03\x15%&\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x18\x02\x19\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03\x18\x02\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x18\x0b\x11\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x18\x12\x14\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x18\x17\x18\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x19\x02\x1f\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x19\x02\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03\x19\x0b\x10\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x19\
    \x11\x1a\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x19\x1d\x1e\n\x0b\n\x04\
    \x04\x02\x02\x02\x12\x03\x1a\x02\x1c\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\
    \x03\x1a\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1a\x0b\x11\n\x0c\
    \n\x05\x04\x02\x02\x02\x01\x12\x03\x1a\x12\x17\n\x0c\n\x05\x04\x02\x02\
    \x02\x03\x12\x03\x1a\x1a\x1b\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1b\x02\
    %\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03\x1b\x02\n\n\x0c\n\x05\x04\x02\
    \x02\x03\x05\x12\x03\x1b\x0b\x10\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\
    \x1b\x11\x20\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1b#$\n\x0b\n\x04\
    \x04\x02\x02\x04\x12\x03\x1c\x02\x19\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\
    \x03\x1c\x02\n\n\x0c\n\x05\x04\x02\x02\x04\x06\x12\x03\x1c\x0b\x0f\n\x0c\
    \n\x05\x04\x02\x02\x04\x01\x12\x03\x1c\x10\x14\n\x0c\n\x05\x04\x02\x02\
    \x04\x03\x12\x03\x1c\x17\x18\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
